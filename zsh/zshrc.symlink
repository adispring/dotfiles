# shortcut to this dotfiles path is $DOTFILES
export DOTFILES=$HOME/.dotfiles

# $ZSH variable is deprecated, use $DOTFILES instead
export ZSH="$DOTFILES"

# Oh My Zsh could be installed somewhere out of dotfiles directory tree, e.
# into  ~/.oh-my-zsh; the configuration file created by Oh My Zsh
# should be moved as follows: {.zshrc => $DOTFILES/zsh/oh-my-
if [[ -f $DOTFILES/zsh/oh-my-zshrc ]]; then
    () {
        local ZSH="$HOME/.oh-my-zsh"
        source $DOTFILES/zsh/oh-my-zshrc
        export OHMYZSH="$ZSH"
    }
else
    # initialize autocomplete here, otherwise functions won't be loaded
    autoload -U compinit
    compinit
fi

# your project folder that we can `c [tab]` to
export PROJECTS=~/Code

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($DOTFILES/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# Notify existing users that they should migrate to another variable.
export ZSH='$ZSH is deprecated, use either $DOTFILES or $OHMYZSH instead.'

# Better history
# Credits to https://coderwall.com/p/jpj_6q/zsh-better-history-searching-with-arrow-keys
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down

# Personal customizes

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export TERM=xterm-256color

em() {
  emacsclient -t $1 || (emacs --daemon && emacsclient -t $1)
}

# fzf config
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# percol config
function exists { which $1 &> /dev/null }
if exists percol; then
    function percol_select_history() {
        local tac
        exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N percol_select_history
    bindkey '^R' percol_select_history
fi

ip() {
  ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'
}

export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/platform-tools
export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

